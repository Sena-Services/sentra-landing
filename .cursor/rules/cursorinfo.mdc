---
description: 
globs: 
alwaysApply: true
---
# Sentra Landing Page Project Snapshot

## Overview

This project is the landing page for Sentra, a B2B travel platform. The landing page is designed as a single-page scrolling website, with different sections highlighting various aspects of the Sentra platform.

## Technology Stack

*   **Framework**: Next.js (v15.3.2)
*   **Language**: TypeScript (v5)
*   **UI Library**: React (v19.0.0)
*   **Styling**: Tailwind CSS (v4)
*   **Animation**: Framer Motion (motion v12.15.0)
*   **Icons**: Lucide React (v0.511.0)
*   **Linting**: ESLint (v9)
*   **Package Manager**: npm

## Project Structure

*   `src/app/`: Contains the main application routing and page logic.
    *   `page.tsx`: The main entry point for the landing page, rendering different sections.
    *   `layout.tsx`: The root layout component.
    *   `globals.css`: Global styles for the application.
*   `src/components/`: Contains reusable React components.
    *   `NavBar.tsx`: The navigation bar component. Now includes a bottom border for visual separation.
    *   `IntroSection.tsx`: The first section of the landing page (typically full screen height), explaining what Sentra is with interactive keyword highlighting. The main answer block is styled to be more prominent, with larger text and no background, ensuring better vertical alignment of keywords.
    *   `Keyword.tsx`: A component used within `IntroSection.tsx` to handle the display and interaction of highlighted keywords, featuring a Framer Motion animation for a background "unfill" effect on the active keyword.
    *   `FeaturesSection.tsx`: The features section, designed to be more compact (e.g., `90vh`). It has a left sidebar and a right horizontal scrolling area for feature details. Spacing above this section is adjustable.
*   `public/`: Static assets.
*   `package.json`: Project dependencies and scripts.
*   `next.config.ts`: Next.js configuration.
*   `tailwind.config.ts` (expected, but not explicitly seen in `list_dir`): Tailwind CSS configuration.
*   `tsconfig.json`: TypeScript configuration.

## Current Development State

*   The basic structure of the single-page scrolling website is in place.
*   The `NavBar` component is implemented and now has a bottom border.
*   The `IntroSection` component is fully implemented, typically occupies the full screen height, and features an enhanced answer block for prominence (larger text, no background, improved alignment) and an animated keyword highlighting mechanism.
*   The `FeaturesSection` component has been refactored for a more compact layout (e.g., `90vh` or adjustable height) with improved image sizing within its horizontal scroller:
    *   A left sidebar (configurable width) containing a modern feature list with icons.
    *   Five features: Integrations, Automation, Communication, Reporting, and Workflows.
    *   Interactive selection states: Clicking a feature in the sidebar highlights it and scrolls the right content area to the corresponding feature's content.
    *   A right content area (configurable width) that functions as a horizontal scroller. Each feature has a dedicated "slide" in this scroller, designed to fit within the section's constrained height.
        *   "Integrations" slide displays `features1.png`.
        *   "Automation" slide displays `features2.png`.
        *   Other features show placeholder text.
        *   Image display within slides is now more responsive to the available space.
    *   Uses Lucide React icons for feature representation.
*   Placeholder sections for "About Us" and "Book a Demo" exist in `src/app/page.tsx`.

## Features Section Details

*   **Layout**: The section is designed to fit within a specific viewport height (e.g., `90vh`, configurable), with top/bottom padding for spacing from adjacent sections.
*   **Left Sidebar Features**:
    *   INTEGRATIONS (Puzzle icon) - Selecting this scrolls the right panel to its content, displaying `features1.png`.
    *   AUTOMATION (Users icon) - Selecting this scrolls the right panel to its content, displaying `features2.png`.
    *   COMMUNICATION (MessageSquare icon) - Selecting this scrolls the right panel to its placeholder content.
    *   REPORTING (BarChart3 icon) - Selecting this scrolls the right panel to its placeholder content.
    *   WORKFLOWS (Workflow icon) - Selecting this scrolls the right panel to its placeholder content. (Was previously default, now first feature is default).
*   **Manual Controls**: All positioning, sizing (including image dimensions), and colors are configurable via the `MANUAL_CONTROLS` object.
*   **Interactive States**: Click-based selection in the sidebar, with visual feedback (Sentra brand colors) and smooth horizontal scrolling in the right content area.
*   **Right Area (Horizontal Scroller)**: Displays content (images or placeholders) for each feature in a horizontally scrollable view. The images are sized to be as large as possible while fitting within the constrained height of the section. Clicking a feature in the sidebar scrolls this area to the corresponding content.

## Making Changes

1.  **Running the development server**:
    ```bash
    npm run dev
    ```
    This will start the Next.js development server, typically on `http://localhost:3000`.

2.  **Adding new sections**:
    *   Create a new component for the section in the `src/components/` directory.
    *   Import and render this component in `src/app/page.tsx`.
    *   If the section needs to be linked from the `NavBar`, update `src/components/NavBar.tsx` accordingly (e.g., adding an anchor link and corresponding `id` to the new section).

3.  **Modifying existing sections**:
    *   Locate the relevant component in `src/components/` (e.g., `IntroSection.tsx` for the intro, `FeaturesSection.tsx` for features).
    *   Make the necessary changes to the component's JSX, logic, and styling.
    *   Use the MANUAL_CONTROLS objects in each component for easy customization of layouts and styling.

4.  **Customizing Features Section**:
    *   Adjust the overall section height and padding in `FeaturesSection.tsx` (e.g., `className="h-[90vh] ... pt-8 pb-8"`).
    *   Adjust the `leftWidth` and `rightWidth` in `MANUAL_CONTROLS` to change the sidebar proportion.
    *   Modify the `features` array in `FeaturesSection.tsx` to add/remove/change features, including their `imageSrc` property.
    *   Update image sizing using `imageMaxWidth` (e.g., `max-w-5xl`) and `imageMaxHeight` (e.g., `max-h-full`) in `MANUAL_CONTROLS`. Also adjust slide padding (e.g., `p-4`) for more image space.
    *   Update colors, spacing, and styling via the `MANUAL_CONTROLS` object.

5.  **Styling**:
    *   Tailwind CSS utility classes are used for styling. Add or modify classes directly in the JSX.
    *   Global styles can be added to `src/app/globals.css`.
    *   Sentra brand colors are defined and available: `sentra-apricot-jet`, `sentra-midnight-deck`, `sentra-travertine`, `sentra-dune-mist`, `sentra-ocean-route`

6.  **Interactivity and Animations**:
    *   Framer Motion (`motion`) is available for animations, and is used in `Keyword.tsx` for an animated background effect.
    *   Custom React hooks and state management (e.g., `useState`, `useEffect`) are used for component-level interactivity.
    *   Lucide React icons are available for UI elements.

7.  **Linting and Formatting**:
    *   Run `npm run lint` to check for linting errors.
    *   Ensure code formatting is consistent (consider adding Prettier if not already in use).

## Next Steps (based on current progress)

*   Implement a horizontal ruler/navigation bar at the bottom of the Features section that indicates the current feature and allows scrolling between features.
*   Populate the remaining feature slides in the Features section with their respective data flow diagrams or content.
*   Add interactivity to the data flow diagrams (hover effects, click interactions) once implemented.
*   Implement the "About Us" and "Book a Demo" sections.
*   Enhance the NavBar to include proper linking to all sections.

This document provides a snapshot of the project. For more detailed information, refer to the specific files and components mentioned.
